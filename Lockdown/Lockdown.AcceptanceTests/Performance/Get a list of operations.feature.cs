// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Lockdown.AcceptanceTests.Performance
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Get List Of Operations")]
    public partial class GetListOfOperationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Get a list of operations.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Get List Of Operations", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Outright speed")]
        [NUnit.Framework.CategoryAttribute("performance")]
        public virtual void OutrightSpeed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Outright speed", new string[] {
                        "performance"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("I have an azman store");
#line 6
 testRunner.And("the store has an application called MyApp");
#line 7
 testRunner.And("the store has an operation X with id 1");
#line 8
 testRunner.And("the store has an operation Y with id 2");
#line 9
 testRunner.When("I open the store");
#line 10
 testRunner.And("I get the list of operations 100000 times");
#line 11
 testRunner.Then("the test takes less than 7000ms");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parallel outright speed")]
        [NUnit.Framework.CategoryAttribute("performance")]
        public virtual void ParallelOutrightSpeed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parallel outright speed", new string[] {
                        "performance"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I have an azman store");
#line 16
 testRunner.And("the store has an application called MyApp");
#line 17
 testRunner.And("the store has an operation X with id 1");
#line 18
 testRunner.And("the store has an operation Y with id 2");
#line 19
 testRunner.When("I open the store");
#line 20
 testRunner.And("I get the list of operations 100000 times in parallel");
#line 21
 testRunner.Then("the test takes less than 2000ms");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
